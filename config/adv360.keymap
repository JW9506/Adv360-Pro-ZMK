
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/outputs.h>


&sl {
    release-after-ms = <400>;
};

/ {
  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
    lbhm: left_balanced_homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "LEFT_BALANCED_HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <100>;    // <---[[moderate duration]]
        quick-tap-ms = <0>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = < 15 16 17 18 19 20 21 37 38 39 40 41 42 43 59 60 61 62 63 64 65 82 83 84 85 86 87 105 106 107 108 109 56 57 78 100 101 102 >;
    };

   rbhm: right_balanced_homerow_mods {
     compatible = "zmk,behavior-hold-tap";
     label = "RIGHT_BALANCED_HOMEROW_MODS";
     #binding-cells = <2>;
     tapping-term-ms = <100>;    // <---[[moderate duration]]
     quick-tap-ms = <0>;
     flavor = "balanced";
     bindings = <&kp>, <&kp>;
     hold-trigger-key-positions = < 0  1  2  3  4  5  6 22 23 24 25 26 27 28 44 45 46 47 48 49 50 66 67 68 69 70 71 88 89 90 91 92 52 53 75 95 96 97 >;
 };

    pht: positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "POSITIONAL_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <180>;
        bindings = <&kp>, <&kp>;
    }; /* quick-tap-ms = <100>; */
    mo_td: tap_dance_mod_tap {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_MOD_TAP";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&sl 1>, <&sl 2>;
    };
    l_alt_gui: l_alt_or_gui {
      compatible = "zmk,behavior-tap-dance";
      label = "L_ALT_OR_GUI";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp LALT>, <&kp LGUI>;
    };
    r_alt_gui: r_alt_or_gui {
      compatible = "zmk,behavior-tap-dance";
      label = "R_ALT_OR_GUI";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp RALT>, <&kp RGUI>;
    };
    l_ctrl_shft: l_ctrl_or_shft {
      compatible = "zmk,behavior-tap-dance";
      label = "L_CTRL_OR_SHFT";
      #binding-cells = <0>;
      tapping-term-ms = <80>;
      bindings = <&kp LCTRL>, <&kp LSHFT>;
    };
    r_ctrl_shft: r_ctrl_or_shft {
      compatible = "zmk,behavior-tap-dance";
      label = "R_CTRL_OR_SHFT";
      #binding-cells = <0>;
      tapping-term-ms = <80>;
      bindings = <&kp RCTRL>, <&kp RSHFT>;
    };

    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <400>;
      quick-release;
    };
    rsh_cl: r_shift_or_cap_lock {
      compatible = "zmk,behavior-tap-dance";
      label = "R_SHIFT_OR_CAP_LOCK";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&skq RSHFT>, <&kp CAPS>;
    };
    lsh_cl: l_shift_or_cap_lock {
      compatible = "zmk,behavior-tap-dance";
      label = "L_SHIFT_OR_CAP_LOCK";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&skq LSHFT>, <&kp CAPS>;
    };
  };

  macros {
    ZMK_MACRO(KR_RE,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
            = <&macro_press &kp R &kp E>
            , <&macro_pause_for_release>
            , <&macro_release &kp R &kp E>
        ;
    )
    sacpy: sacpy {
        label = "sacpy";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
            = <&kp LC(A)>
            , <&kp BSPC>
            , <&kp LC(V)>
            , <&kp LC(S)>
            ;
    };
    pause_vid: pause_vid {
        label = "pause_vid";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <150>;
        bindings
            = <&macro_tap_time 10>
            , <&kp LA(TAB)>
            , <&kp SPACE>
            , <&macro_tap_time 10>
            , <&kp LA(TAB)>
            ;
    };
    prependx: prependx {
        label = "prependx";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
            = <&kp HOME>
            , <&kp X>
            , <&kp END>
            ;
    };
    tuskequal: tuskequal {
        label = "tuskequal";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
            = <&kp COLON>
            , <&kp EQUAL>
            ;
    };
    leftarrow: leftarrow {
        label = "leftarrow";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
            = <&kp LT>
            , <&kp MINUS>
            ;
    };
    rightarrow: rightarrow {
        label = "rightarrow";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
            = <&kp MINUS>
            , <&kp GT>
            ;
    };
  };

  keymap {
        compatible = "zmk,keymap";

// -----------------------------------------------------------------------           ---------------------------------------------------------------------
// |   TAB    |         |         |         |         |         |  None  |           | None |         |         |         |         |          |          |
// |LC(LSHFT) |    Q    |    W    |    F    |    P    |    B    |  None  |           | None |    Y    |    U    |    I    |    O    |    P     | LC(LSHFT)|
// |LSHFT/ESC |    A    |    R    |    S    |    T    |    G    |  None  |           | None |    H    |    J    |    K    |    L    |    ;     |  RSHFT   |
// |  LCTRL   |    Z    |    X    |    C    |    D    |    V    |---------           -------|    N    |    M    |    ,    |    .    |    /     |  RCTRL   |
// |  DOWN    |    `    |    '    |  LEFT   |   LALT  |----------                           ----------|   RALT  |  RIGHT  |    [    |    ]     |   UP     |
// ----------------------------------------------------                                                ----------------------------------------------------
//
//                                                                        Thumb Cluster
//                                                       -----------------           ------------------
//                                                       |       | LGUI  |           | LGUI  |        |
//                                               -------------------------           ---------------------------
//                                               |       |       | LALT  |           | RALT  |        |        |
//                                               | BKSP  | LAYER |--------           --------| LAYER  |  BSPC  |
//                                               |       | SWITCH| LCTRL |           | RCTRL | SWITCH |        |
//                                               -------------------------           ---------------------------

// can first layer <> be something else? []/() be a good replacement?
// left hand enter? mirror pos from right - check
// TODO: toggle layer

        default_layer {
            bindings = <
 &kp TAB           &kp LA(SPACE)  &kp LC(PG_UP) &kp LA(TAB) &kp LC(PG_DN)     &kp LA(LSHFT)      &none                                                                   &none         &KR_RE     &kp LC(LG(LEFT)) &kp LC(TAB) &kp LC(LG(RIGHT))  &kp LG(TAB)  &kp LC(LGUI)
&pht LC(LSHFT) ESC &kp Q          &kp W         &kp F      &kp P             &kp B              &kp F12                                                                  &kp F11       &kp J      &kp L      &kp U          &kp Y              &kp EXCL     &pht RC(RSHFT) ESC
 &lsh_cl           &kp A          &kp R         &kp S      &kp T             &kp G             &kp LEFT                                                                 &kp RIGHT      &kp M      &kp N      &kp E          &kp I              &kp O        &rsh_cl
&pht LCTRL SPACE   &kp Z          &kp X         &kp C      &kp D             &kp V                                                                                                     &kp K      &kp H      &kp BSPC       &kp RET            &kp FSLH     &pht RCTRL ESC
 &kp DOWN          &kp GRAVE      &kp SQT       &kp LEFT   &l_alt_gui                                                                                                                             &r_alt_gui &kp RIGHT      &kp LBKT           &kp RBKT     &kp UP

                                                                                                              &kp UP  &kp LGUI           &kp LGUI      &kp DOWN
                                                                                                                      &kp LALT           &kp RALT
                                                                                                    &kp BSPC  &mo_td  &l_ctrl_shft       &r_ctrl_shft  &mo_td   &kp SPACE
            >;
        };

        layer_keypad {
            bindings = <
 &kp PSCRN &kp F1     &kp F2    &kp F3    &kp F4     &kp F5                 &kp F6                                                                             &kp F7       &kp F8        &kp F9      &kp F10    &kp F11   &kp F12     &kp DEL
  &trans   &kp TAB    &kp SEMI  &kp COLON &kp GRAVE  &kp BSLH               &kp LC(LALT)                                                                       &kp RC(LALT) &kp LA(SPACE) &tuskequal  &kp LT     &kp GT    &rightarrow &trans
  &trans   &kp HOME   &kp PG_UP &kp PG_DN &kp F12    &kp END                &kp RET                                                                            &trans       &kp MINUS     &kp EQUAL   &kp COMMA  &kp DOT   &kp F12     &trans
  &trans   &kp N1     &kp N2    &kp N3    &kp N4     &kp N5                                                                                                                 &kp N6        &kp N7      &kp N8     &kp N9    &kp N0      &trans
  &trans   &kp BSPC   &kp CAPS  &trans    &trans                                                                                                                                         &trans      &trans     &kp LPAR  &kp RPAR    &trans

                                                                                                  &trans    &trans               &trans   &trans
                                                                                                            &trans               &trans
                                                                                       &kp BSPC   &kp RET   &mo 3               &trans    &mo 2   &trans


            >;
        };

        layer_fn {
            bindings = <
 &trans  &trans   &trans  &trans  &trans      &trans                            &trans                                                                   &trans  &trans     &trans   &trans    &trans     &trans    &trans
&trans &pause_vid &sacpy  &trans  &trans     &kp PIPE                          &trans                                                                   &trans  &trans     &trans   &trans   &trans      &trans    &trans
 &trans  &trans   &trans  &trans  &kp F12     &trans                            &trans                                                                   &trans  &kp UNDER  &kp PLUS &kp LT   &kp GT      &kp COLON &trans
 &trans  &kp EXCL &kp AT  &kp POUND  &kp DLLR &kp PRCNT                                                                                                      &kp CARET  &kp AMPS &kp STAR  &kp LPAR   &kp RPAR  &trans
 &trans  &trans   &trans  &trans  &trans                                                                                                                                &trans   &trans    &trans     &trans    &trans

                                                                                       &trans  &trans                 &trans     &trans
                                                                                               &trans                 &trans
                                                                               &trans  &trans  &trans                 &trans     &kp RET      &trans

            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &out OUT_BLE    &bl BL_TOG         &none            &none            &rgb_ug RGB_TOG                                                                               &none                          &none   &none       &none  &bl BL_TOG   &none  &none
  &none  &bt BT_SEL 1  &out OUT_USB         &none         &none            &none            &bootloader                                                                                   &bootloader                    &none   &none       &none       &none   &none  &none
  &none  &bt BT_SEL 2         &none         &none         &none            &none            &rgb_ug RGB_MEFS_CMD 5                                                                       &rgb_ug RGB_MEFS_CMD 5          &none   &none       &none       &none   &none   &none
  &none  &bt BT_SEL 3    &bt BT_CLR         &none         &none            &none                                                                                                                                         &none   &none       &none       &none   &none   &none
  &none  &bt BT_SEL 4         &none    &bl BL_INC    &bl BL_DEC                                                                                                                                                                  &bl BL_INC  &bl BL_DEC  &none   &none   &none

                                                                                                                              &bt BT_CLR  &none                  &none       &none
                                                                                                                                          &none                  &none
                                                                                                              &none           &none       &none                  &none       &none &rgb_ug RGB_TOG

            >;
        };

    };
};

